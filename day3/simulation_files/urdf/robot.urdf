<?xml version="1.0"?>
<!-- Standard header for xacro file. Change robot name if you want. Leave schema link -->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro"  name="robot">
    <!-- Robot properties. URDF uses SI MKS units -->
    <!-- Chassis -->
    <xacro:property name="body_x" value="0.3" />
    <xacro:property name="body_y" value="0.15" />
    <xacro:property name="body_z" value="0.15" />
    <xacro:property name="body_m" value="1" />

    <!-- Wheels -->
    <xacro:property name="wheel_r" value="0.08" />
    <xacro:property name="wheel_w" value="0.05" />
    <xacro:property name="wheel_m" value="0.01" />
    <!-- Wheels center -->
    <!-- We need a link for the center of the wheels. This is where odometry data will be measured from -->
    <xacro:property name="wheel_x" value="0.10" />
    <xacro:property name="wheel_z" value="-0.025" />

    <!-- Caster -->
    <xacro:property name="caster_r" value="0.04" />
    <xacro:property name="caster_m" value="0.01" />
    <xacro:property name="caster_x" value="-0.10" />

    <!-- Colors -->
    <material name="blue">
        <color rgba="0 0 0.8 1"/>
    </material>
    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>


    <!-- Inertia calculation macros -->
    <!-- This is essential for simulation, but irrelevant for plain URDF visualization-->
    <!-- Chassis as a block -->
    <xacro:macro name="block_inertia" params="m len_x len_y len_z">
        <inertial>
            <mass value="${m}" />
            <origin xyz="0 0 0" rpy="0 0 0" />
            <inertia 
                ixx="${(1/12.0) * m * (len_y*len_y + len_z*len_z)}"
                iyy="${(1/12.0) * m * (len_x*len_x + len_z*len_z)}"
                izz="${(1/12.0) * m * (len_x*len_x + len_y*len_y)}"
                ixy="0" ixz="0" iyz="0"/>
        </inertial>
    </xacro:macro>

    <!-- Wheels as solid cylinders -->
    <xacro:macro name="cylinder_inertia" params="m r w">
        <inertial>
            <mass value="${m}" />
            <origin xyz="0 0 0" rpy="0 0 0" />
            <inertia 
                ixx="${(1/12.0) * m * (3 * r * r + w * w)}"
                iyy="${(1/12.0) * m * (3 * r * r + w * w)}"
                izz="${(1/2.0) * m * r * r}"
                ixy="0" ixz="0" iyz="0"/>
        </inertial>
    </xacro:macro>

    <!-- Caster as a solid wheel -->
    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}" />
            <origin xyz="0 0 0" rpy="0 0 0" />
            <inertia 
                ixx="${(2/5.0) * m * r * r}"
                iyy="${(2/5.0) * m * r * r}"
                izz="${(2/5.0) * m * r * r}"
                ixy="0" ixz="0" iyz="0"/>
            </inertial>
    </xacro:macro>

    <!-- Wheel placement macro -->
    <!-- Better to make a macro since there are two wheels -->
    <!-- Axes will be more clear further down -->
    <xacro:macro name="wheel_placement" params="wheel_prefix">
        <!-- Reflection parameter: -1 for right and 1 for left-->
        <xacro:if value="${wheel_prefix == 'right'}">
            <xacro:property name="reflection" value="-1"/>
        </xacro:if>
        <xacro:if value="${wheel_prefix == 'left'}">
            <xacro:property name="reflection" value="1"/>
        </xacro:if>
        <joint name="${wheel_prefix}_wheel_joint" type="continuous">
            <parent link="wheel_center_link"/>
            <child link="${wheel_prefix}_wheel_link"/>
            <axis xyz="0 0 1"/>
            <!-- Wheel moving forward must be positive z -->
            <origin xyz="0 ${reflection*(body_y/2+wheel_w/2)} 0" rpy="-1.571 0 0"/>
        </joint>
        <link name="${wheel_prefix}_wheel_link">
            <visual>
                <geometry>
                    <cylinder length="${wheel_w}" radius="${wheel_r}"/>
                </geometry>
                <material name="black"/>
            </visual>
            <collision>
                <geometry>
                    <sphere radius="${wheel_r}"/> <!-- Sphere collision used for ideal odometry. Use cylinder for more realism -->
                </geometry>
            </collision>
            <xacro:cylinder_inertia m="${wheel_m}" r="${wheel_r}" w="${wheel_w}"/>
        </link>
    </xacro:macro>

    <!-- Robot assembly -->
    <!-- Base link name and orientation follow REPs 103 and 105 -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${body_x} ${body_y} ${body_z}"/>
            </geometry>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <box size="${body_x} ${body_y} ${body_z}"/>
            </geometry>
        </collision>
        <xacro:block_inertia m="${body_m}" len_x="${body_x}" len_y="${body_y}" len_z="${body_z}"/>
    </link>

    <!-- Link for wheel odometry measurement-->
    <!-- Since this is a virtual rigid link attached to base, it doesn't need inertia, even for simulation-->
    <!-- All that is required is the joint -->
    <joint name="wheel_center_joint" type="fixed">
        <parent link="base_link"/>
        <child link="wheel_center_link"/>
        <axis xyz="0 0 1"/>
        <origin xyz="${wheel_x} 0 ${wheel_z}" rpy="0 0 0"/>
    </joint>
    <link name="wheel_center_link"/>

    <!-- Spawn the wheels -->
    <xacro:wheel_placement wheel_prefix="right"/>
    <xacro:wheel_placement wheel_prefix="left"/>

    <!-- Spawn the caster -->
    <joint name="caster_joint" type="fixed">
        <parent link="base_link"/>
        <child link="caster_link"/>
        <axis xyz="0 0 1"/>
        <origin xyz="${caster_x} 0 ${wheel_z-wheel_r+caster_r}" rpy="0 0 0"/>
    </joint>

    <link name="caster_link">
        <visual>
            <geometry>
                <sphere radius="${caster_r}"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${caster_r}"/>
            </geometry>
        </collision>
        <xacro:sphere_inertia m="${caster_m}" r="${caster_r}"/>
    </link>

    <!-- Nullify the friction in the caster for simulation purposes -->
    <gazebo reference="caster_link">
        <mu1>0</mu1>
        <mu2>0</mu2>
    </gazebo>

    <!-- Differential driving of robot in simulation -->
    <ros2_control name="controller" type="system">
        <hardware>
            <plugin>ign_ros2_control/IgnitionSystem</plugin>
        </hardware>
        <joint name="right_wheel_joint">
            <command_interface name="velocity">
                <param name="min">-100</param>
                <param name="max">100</param>
            </command_interface>
            <state_interface name="position"/>
            <state_interface name="velocity"/>
        </joint>
        <joint name="left_wheel_joint">
            <command_interface name="velocity">
                <param name="min">-100</param>
                <param name="max">100</param>
            </command_interface>
            <state_interface name="position"/>
            <state_interface name="velocity"/>
        </joint>
    </ros2_control>
    <gazebo>
        <plugin filename="ign_ros2_control-system" name="ign_ros2_control::IgnitionROS2ControlPlugin">
            <robot_param>robot_description</robot_param>
            <robot_param_node>robot_state_publisher</robot_param_node>
            <parameters>$(find simulation_files)/config/control_parameters.yaml</parameters>
        </plugin>
    </gazebo>

</robot>